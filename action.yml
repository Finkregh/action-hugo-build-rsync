# SPDX-License-Identifier: MIT
name: "Build hugo site and rsync to destination"
author: "Oluf Lorenzen <ol+forgejo-action@oluflorenzen.de"
description: |
  Builds a hugo side and rsyncs the generated files somewhere.

  Expected evironment:
    - secret: SSH_PRIVATE_KEY
      used for authentication
    - 

  If `binary` is specified, Forgejo downloads the binary from the URL and uses
  it to start an instance.

  Otherwise, `image` and `image-version` must be specified and Forgejo
  runs from the corresponding container image using docker.

  The forgejo-test-helper.sh script is available to help test and debug actions.

  `forgejo=http://root:admin1234@steps.forgejo.outputs.host-port`

  * `forgejo-test-helper.sh push_self_action $forgejo root myaction vTest`
    Creates the repository `$forgejo/root/myaction` and populates it with the
    content of the repository under test, except for the `.forgejo` directory
    (it would otherwise create an infinite loop). The tag `vTest` is
    set to the SHA under test.
  * `forgejo-test-helper.sh run_workflow testrepo $forgejo root testrepo myaction`
    Creates the repository `$forgejo/root/testrepo` and populates it with the
    content of the `testrepo` directory. All occurrences of `SELF` in
    `testrepo/.forgejo/workflows/*.yml` are replaced with `$forgejo/root/myaction`.
  * `forgejo-test-helper.sh push testrepo $forgejo root testrepo`
    Creates the repository `$forgejo/root/testrepo` and populates it with the
    content of the `testrepo` directory.

  The combination of `push_self_action` and `run_workflow` allows to
  run Forgejo Actions workflows from `testrepo` that use the action
  under test (`myaction`) to verify it works as intended.

  The [forgejo-curl.sh](https://code.forgejo.org/forgejo/forgejo-curl#forgejo-curlsh)
  script is logged in the instance and ready to be used with web or api endpoints.

inputs:
  hugo_args:
    description: arguments to 'hugo build'
    default: '--minify'
  main_domain:
    description: domain used in hugo baseURL for main branch builds
  pr_domain:
    description: domain used in Hugo baseURL for PR build
  pr_subdomain:
    description: subdomain used in Hugo baseURL for PR builds, will be suffixed with pr_basedomain
  main_rsync_destination_dir:
    description: rsync destination directory
  pr_rsync_destination_basedir:
    description: rsync destination directory for PR buiBASEDOMAINlds, will be suffixed by '/pr_basedomain'
  main_rsync_server:
    description: server name used for rsync destination
  pr_rsync_server:
    description: server name used for rsync destination for PR build; defaults to 'main_rsync_server'
    default: ""
  main_rsync_user:
    description: username for the rsync destination
  pr_rsync_user:
    description: username for the rsync destination for PR build, defaults to 'main_rsync_user'
    default: ""
  main_rsync_rsh:
    description: Value for 'RSYNC_RSH', e.g. 'ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no'; defaults to 'ssh'
    default: ssh
  pr_rsync_rsh:
    description: Value for 'RSYNC_RSH' for PR builds; defaults to 'main_rsync_rsh', which defaults to 'ssh'
    default: ""
  main_rsync_args:
    description: additional rsync arguments, e.g. '--dry-run'
    default: "-atv --progress --delete"
  pr_rsync_args:
    description: additional rsync arguments for PR build; defaults to 'main_rsync_args'
    default: ""
  ssh_known_hosts:
    description: content of ssh UserKnownHostsFile, used by rsync; generate by running 'ssh-keyscan hostname'

  hugo_cachedir:
    description: Where to point HUGO_CACHEDIR to; should not be changed to allow caching in CI
    default: "/tmp/hugo_cache"
  git_checkout_depth:
    description: Depth to use when doing the git checkout; defaults to 0
    default: "0"
  forgejo_curl_source:
    description: where do download the script
    default: "https://git.h.oluflorenzen.de/mirrors/forgejo-curl/raw/branch/main/forgejo-curl.sh"

outputs:
  site_url:
    description: "URL to the website build"
    value: "${{ steps.build.outputs.site_url }}"

runs:
  using: "composite"
  steps:
    - id: preparation_packages
      name: Install required packages
      run: apk add  curl bash openssh-client rsync tar
      shell: sh

    - name: Restore Hugo resources
      uses: actions/cache/restore@v4
      with:
        path: ./resources
        key: cache-hugo-resources-
        restore-keys: |
          cache-hugo-resources-

    - name: Restore HUGO_CACHEDIR
      uses: actions/cache/restore@v4
      with:
        path: ${{ env.HUGO_CACHEDIR }}
        key: hugocachedir-${{ runner.os }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          hugocachedir-${{ runner.os }}-

    - id: set_vars
      shell: bash
      run: |
        set -euo pipefail
        HUGO_ARGS="${{ inputs.hugo_args }}"
        RSYNC_ARGS="${{ inputs.main_rsync_args }}"
        RSYNC_ARGS_PR="${{ inputs.pr_rsync_args }}"
        RSYNC_SERVER="${{ inputs.main_rsync_server }}"
        RSYNC_SERVER_PR="${{ inputs.pr_rsync_server }}"
        RSYNC_USER="${{ inputs.main_rsync_user }}"
        RSYNC_USER_PR="${{ inputs.pr_rsync_user }}"
        RSYNC_RSH="${{ inputs.main_rsync_rsh}}"
        RSYNC_RSH_PR="${{ inputs.pr_rsync_rsh}}"
        RSYNC_DST_BASEDIR="${{ inputs.main_rsync_destination_dir }}"
        RSYNC_DST_BASEDIR_PR="${{ inputs.pr_rsync_destination_dir}}"

        HUGO_DOMAIN="${{ inputs.main_domain }}"
        RSYNC_DEST_DIR="${{ inputs.main_rsync_destination_dir }}"

        if "${FORGEJO_EVENT_NAME}" == "pull_request"; then
          if [ ! -z "${RSYNC_ARGS_PR+x}" ] ; then RSYNC_ARGS=${RSYNC_ARGS_PR} ; fi
          if [ ! -z "${RSYNC_SERVER_PR+x}" ] ; then RSYNC_SERVER=${RSYNC_SERVER_PR} ; fi
          if [ ! -z "${RSYNC_USER_PR+x}" ] ; then RSYNC_USER=${RSYNC_USER_PR} ; fi
          if [ ! -z "${RSYNC_RSH_PR+x}" ] ; then RSYNC_RSH=${RSYNC_RSH_PR} ; fi
          HUGO_DOMAIN="${{ inputs.pr_subdomain }}-pr-${{ forge.event.pull_request.number }}.${{ inputs.pr_domain }}"
          RSYNC_DEST_DIR="${{ inputs.pr_rsync_destination_basedir }}/${HUGO_DOMAIN}"
        fi

        export HUGO_ARGS RSYNC_ARGS RSYNC_SERVER RSYNC_USER RSYNC_RSH HUGO_DOMAIN RSYNC_DEST_DIR
        
    - id: build
      name: Build
      shell: bash
      run: |
        set -euo pipefail
        if "${FORGEJO_EVENT_NAME}" == "pull_request"; then
          _PROTO=http
        else
          _PROTO=https
        fi
        export HUGO_BASEURL="${_PROTO}://${HUGO_DOMAIN}"

        echo "base URL is ${HUGO_BASEURL}"
        hugo build --minify
        echo site_url="${HUGO_BASEURL}" >> $GITHUB_OUTPUT

    - name: Save Hugo resources
      uses: actions/cache/save@v4
      with:
        path: ./resources
        key: cache-hugo-resources-${{ hashFiles('./resources/**/*') }}

    - name: Save HUGO_CACHEDIR
      uses: actions/cache/save@v4
      with:
        path: ${{ env.HUGO_CACHEDIR }}
        key: hugocachedir-${{ runner.os }}-${{ hashFiles('**/go.sum') }}


    - id: deploy
      name: Deploy with rsync
      shell: bash
      run: |
        set -euo pipefail

        mkdir -p ~/.ssh && touch ~/.ssh/known_hosts && chmod -R g=,o= ~/.ssh
        echo "${{ inputs.ssh_known_hosts }}" > ~/.ssh/known_hosts
        
        eval $(ssh-agent -s)
        echo "${{ secrets.SSH_PRIVATE_KEY }}" | ssh-add -
        
        set -x
        rsync ${RSYNC_ARGS} ./public/* "${RSYNC_USER}@${RSYNC_SERVER}:${RSYNC_DEST_DIR}/"
        set +x

    - name: Link to websiete, add PR comment
      shell: bash
      run: |
        set -euo pipefail
        echo "Build is accesisble at ${{ steps.build.outputs.site_url }}"

        if "${FORGEJO_EVENT_NAME}" == "pull_request"; then
          echo "This is a PR, adding a comment if it hasnt been created yet"
          curl --fail -sS -o /usr/local/bin/forgejo-curl.sh ${{ inputs.forgejo_curl_source }} && chmod +x /usr/local/bin/forgejo-curl.sh
          export PATH=/usr/local/bin:$PATH
          forgejo-curl.sh --token "${{ env.FORGEJO_TOKEN }}" login ${{ env.FORGEJO_SERVER_URL }}
          forgejo-curl.sh api_json ${{ env.FORGEJO_SERVER_URL }}/api/v1/user
          if forgejo-curl.sh --verbose api ${{ env.FORGEJO_SERVER_URL }}/api/v1/repos/${{ env.FORGEJO_REPOSITORY }}/issues/${{ forge.event.pull_request.number }}/comments | grep -q "Website preview" ; then
            echo "Comment already created"
          else
            forgejo-curl.sh --verbose api_json --data-raw '{"body":"Website preview: ${{ env.HUGO_BASEURL }}"}' ${{ env.FORGEJO_SERVER_URL }}/api/v1/repos/${{ env.FORGEJO_REPOSITORY }}/issues/${{ forge.event.pull_request.number }}/comments
          fi
        fi