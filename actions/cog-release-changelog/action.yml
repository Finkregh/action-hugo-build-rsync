# SPDX-License-Identifier: MIT
# yaml-language-server: $schema=https://www.schemastore.org/github-action.json
name: "Cocogitto Release and Changelog with Build Tools"
author: "Oluf Lorenzen <ol+forgejo-action@oluflorenzen.de>"
description: |
  Determines versions using cocogitto, creates releases, and optionally builds/publishes packages using custom commands.

  This composite action combines version determination, release creation, and optional package management.
  All build tool commands (install, version, build, publish) can be customized through input parameters.

inputs:
  # Build Tool Installation
  install_build_tools_command:
    description: "Command to install build tools and dependencies. Leave empty to skip installation."
    required: false

  # Build Tool Commands
  set_version_command:
    description: "Command to set package version. Leave empty to skip version setting."
    required: false

  build_command:
    description: "Command to build package. Leave empty to skip building."
    required: false

  publish_command:
    description: "Command to publish package. Leave empty to skip publishing."
    required: false

  # Environment Variables
  env_vars:
    description: |
      Custom environment variables to set, one per line in KEY=VALUE format.
      Example:
      UV_PUBLISH_USERNAME=myuser
      UV_PUBLISH_PASSWORD=mypass
      UV_PUBLISH_URL=https://example.com/pypi
    required: false

  # Forgejo/Git Configuration
  forgejo_server_url:
    description: "Forgejo server URL for API calls"
    required: false

  forgejo_token:
    description: "Forgejo API token"
    required: false

outputs:
  current:
    description: "Current version from cocogitto"
    value: "${{ steps.get_versions.outputs.current }}"
  new:
    description: "New version from cocogitto auto bump"
    value: "${{ steps.get_versions.outputs.new }}"
  new_dev:
    description: "New development version with _dev suffix"
    value: "${{ steps.get_versions.outputs.new_dev }}"

runs:
  using: "composite"
  steps:
    # Step 1: Checkout with tags and history
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-tags: true
        fetch-depth: 30

    # Step 2: Install cocogitto
    - name: Install cocogitto
      uses: https://git.h.oluflorenzen.de/mirrors/codeberg.PurpleBooth.common-pipelines/actions/install-cocogitto@main

    # Step 3: Get versions (from determine_versions job)
    - name: Get versions
      id: get_versions
      shell: bash
      run: |
        BASH_STATE_BEFORE=$(set +o)
        set -x
        cog get-version
        current=$(cog get-version 2>/dev/null)

        # Check if current version matches semver pattern
        if [[ $current =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "current=${current}" >> "$GITHUB_OUTPUT"
        else
          echo "current=" >> "$GITHUB_OUTPUT"
        fi

        cog bump --auto --dry-run || true
        new_value=$(cog bump --auto --dry-run 2>/dev/null)

        # Check if new version matches semver pattern
        if [[ $new_value =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "new=${new_value}" >> "$GITHUB_OUTPUT"
        else
          echo "new=" >> "$GITHUB_OUTPUT"
        fi

        cog bump --patch --dry-run || true
        new_dev_value=$(cog bump --patch --dry-run 2>/dev/null)
        # if the new_dev_value is empty, set it to the current version with _dev suffix
        if [ -z "${new_dev_value:+x}" ]; then
          new_dev_value="${current}"
        fi

        # Check if new_dev version matches semver pattern before adding _dev suffix
        if [[ $new_dev_value =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "new_dev=${new_dev_value}_dev" >> "$GITHUB_OUTPUT"
        else
          echo "new_dev=" >> "$GITHUB_OUTPUT"
        fi

        cat "$GITHUB_OUTPUT"
        set +x
        eval "$BASH_STATE_BEFORE"

    # Step 4: Checkout again for build phase (matching original workflow)
    - name: Checkout for build
      uses: actions/checkout@v4
      with:
        fetch-depth: 10
        fetch-tags: true

    # Step 5: Install helper script (conditional on forgejo configuration)
    - name: Install helper script
      if: ${{ inputs.forgejo_server_url != '' && inputs.forgejo_token != '' }}
      shell: bash
      env:
        FORGEJO_TOKEN: ${{ inputs.forgejo_token }}
        FORGEJO_SERVER_URL: ${{ inputs.forgejo_server_url }}
      run: |
        curl --fail -sS -o /usr/local/bin/forgejo-curl.sh "https://git.h.oluflorenzen.de/mirrors/forgejo-curl/raw/branch/main/forgejo-curl.sh" && chmod +x /usr/local/bin/forgejo-curl.sh
        export PATH=/usr/local/bin:$PATH
        forgejo-curl.sh --token "${{ env.FORGEJO_TOKEN }}" login ${{ env.FORGEJO_SERVER_URL }}
        forgejo-curl.sh api_json ${{ env.FORGEJO_SERVER_URL }}/api/v1/user

    # Step 6: Set custom environment variables
    - name: Set custom environment variables
      if: ${{ inputs.env_vars != '' }}
      shell: bash
      run: |
        echo "::group::Setting custom environment variables"
        # Parse multi-line env_vars input and set each variable
        while IFS= read -r line; do
          if [[ -n "$line" && "$line" == *"="* ]]; then
            echo "Setting: $line"
            echo "$line" >> "$GITHUB_ENV"
          fi
        done <<< "${{ inputs.env_vars }}"
        echo "::endgroup::"

    # Step 7: Conditional build tools installation
    - name: Install build tools and dependencies
      if: ${{ inputs.install_build_tools_command != '' }}
      shell: bash
      run: ${{ inputs.install_build_tools_command }}

    # Step 8: Install yq
    - name: Install yq
      uses: https://git.h.oluflorenzen.de/mirrors/codeberg.PurpleBooth.common-pipelines/actions/install-yq@main

    # Step 9: Configure Git User
    - name: Configure Git User
      uses: https://git.h.oluflorenzen.de/mirrors/codeberg.PurpleBooth.common-pipelines/actions/configure-git-user@main

    # Step 10: Release with cocogitto
    - name: Release with cocogitto
      uses: https://git.h.oluflorenzen.de/mirrors/codeberg.PurpleBooth.common-pipelines/actions/release-with-cog@main

    # Step 11: Conditional version setting
    - name: Set package version
      if: ${{ inputs.set_version_command != '' && steps.get_versions.outputs.new != '' }}
      shell: bash
      run: ${{ inputs.set_version_command }} ${{ steps.get_versions.outputs.new }}

    # Step 12: Conditional build
    - name: Build package
      if: ${{ inputs.build_command != '' }}
      shell: bash
      run: ${{ inputs.build_command }}

    # Step 13: Conditional publish
    - name: Publish package
      if: ${{ inputs.publish_command != '' }}
      shell: bash
      run: ${{ inputs.publish_command }}

branding:
  icon: "package"
  color: "green"
